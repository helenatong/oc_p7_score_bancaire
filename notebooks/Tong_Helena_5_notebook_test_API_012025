{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/helenatong/oc_p7_score_bancaire/blob/main/notebooks/Tong_Helena_5_notebook_test_API_012025\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M_yoc462ofrY"
      },
      "source": [
        "# **Introduction**\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DT0Vbw38R3HI"
      },
      "source": [
        "## **Contexte et description du notebook**\n",
        "- La société \"Prêt à dépenser\" propose des crédits à la consommation et souhaite créer un outil de “scoring crédit” pour calculer la probabilité qu’un client rembourse son crédit. Ainsi, la société pourra décider si elle souhaite ou non accorder la demande de crédit.\n",
        "- Ce notebook va tester l'API de prédiction déployé sur le cloud à l'URL https://apigrantcredit.azurewebsites.net/.\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XnuEOgORoSyi"
      },
      "source": [
        "# **I. Installation et mise en place de l'environnement de travail**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iCfGUiXL5cEc",
        "outputId": "da3b8ff0-eae6-46af-9994-0b4b970edd7c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Version des librairies :\n",
            "Python        : 3.11.11 (main, Dec  4 2024, 08:55:07) [GCC 11.4.0]\n",
            "Run date      : 2025-01-15T23:04:50.987957\n"
          ]
        }
      ],
      "source": [
        "# Importation des librairies\n",
        "import sys\n",
        "import datetime\n",
        "\n",
        "# Informations sur l'environnement virtuel\n",
        "print('Version des librairies :')\n",
        "print('Python        : ' + sys.version)\n",
        "\n",
        "now  = datetime.datetime.now().isoformat()\n",
        "print('Run date      : ' + now)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8gZzXDSUlLBp"
      },
      "source": [
        "# **II. Tests API Python**"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile test_api.py\n",
        "\n",
        "import pytest\n",
        "import requests\n",
        "\n",
        "API_URL = \"https://apigrantcredit2-ddccfad9cpc3akcx.westeurope-01.azurewebsites.net\"\n",
        "\n",
        "# Test de connexion à l'API\n",
        "def test_home_connexion():\n",
        "  response = requests.get(API_URL)\n",
        "  assert response.status_code == 200\n",
        "  assert response.json() == {'api_availibility': 'OK'}\n",
        "\n",
        "# Tests de prédictions\n",
        "@pytest.mark.parametrize(\"id,expected_proba,expected_output\", [\n",
        "    (100002, 0.85, \"Donner le crédit\"),\n",
        "    (100006, 0.28, \"Ne pas donner le crédit\")\n",
        "])\n",
        "def test_credit_prediction(id, expected_proba, expected_output):\n",
        "    response = requests.post(f\"{API_URL}/predict\", params={\"id\": id})\n",
        "    result = response.json()\n",
        "\n",
        "    assert response.status_code == 200\n",
        "    assert result['client_id'] == id\n",
        "    assert result['probabilité_de_remboursement'] == expected_proba\n",
        "    assert result['prediction'] == expected_output\n",
        "\n",
        "# Tests d'erreur\n",
        "def test_client_id_not_found():\n",
        "  id = 100000\n",
        "  response = requests.post(API_URL+\"/predict\", params={\"id\": id})\n",
        "  assert response.status_code == 404\n",
        "  assert response.json()['detail'] == f\"ID {id} non trouvé\"\n",
        "\n",
        "def test_missing_id():\n",
        "  response = requests.post(API_URL+\"/predict\")\n",
        "  assert response.status_code == 422\n",
        "  assert response.json()['detail'][0]['type'] == 'value_error.missing'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iXDkSZDVA8nt",
        "outputId": "034c08da-616c-4043-f43c-881061aaf93e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting test_api.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pytest test_api.py -v"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uDBldiAsBkUi",
        "outputId": "fd5b7255-387d-468a-e2cb-d061d06ea582"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m======================================= test session starts ========================================\u001b[0m\n",
            "platform linux -- Python 3.11.11, pytest-8.3.4, pluggy-1.5.0 -- /usr/bin/python3\n",
            "cachedir: .pytest_cache\n",
            "rootdir: /content\n",
            "plugins: anyio-3.7.1, typeguard-4.4.1\n",
            "\u001b[1mcollecting ... \u001b[0m\u001b[1m\rcollected 5 items                                                                                  \u001b[0m\n",
            "\n",
            "test_api.py::test_home_connexion \u001b[32mPASSED\u001b[0m\u001b[32m                                                      [ 20%]\u001b[0m\n",
            "test_api.py::test_credit_prediction[100002-0.85-Donner le cr\\xe9dit] \u001b[32mPASSED\u001b[0m\u001b[32m                  [ 40%]\u001b[0m\n",
            "test_api.py::test_credit_prediction[100006-0.28-Ne pas donner le cr\\xe9dit] \u001b[32mPASSED\u001b[0m\u001b[32m           [ 60%]\u001b[0m\n",
            "test_api.py::test_client_id_not_found \u001b[32mPASSED\u001b[0m\u001b[32m                                                 [ 80%]\u001b[0m\n",
            "test_api.py::test_missing_id \u001b[32mPASSED\u001b[0m\u001b[32m                                                          [100%]\u001b[0m\n",
            "\n",
            "\u001b[32m======================================== \u001b[32m\u001b[1m5 passed\u001b[0m\u001b[32m in 1.99s\u001b[0m\u001b[32m =========================================\u001b[0m\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "M_yoc462ofrY",
        "XnuEOgORoSyi",
        "FTuyEIOQbLPR"
      ],
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}