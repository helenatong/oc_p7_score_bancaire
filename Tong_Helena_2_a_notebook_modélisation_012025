{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/helenatong/oc_p7_score_bancaire/blob/main/Tong_Helena_2_a_notebook_mod%C3%A9lisation_012025\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M_yoc462ofrY"
      },
      "source": [
        "# **Introduction**\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DT0Vbw38R3HI"
      },
      "source": [
        "## **Prérequis**\n",
        "- Télécharger [le zip]() dans Google Drive\n",
        "\n",
        "---\n",
        "\n",
        "## **Contexte et description du notebook**\n",
        "- La société \"Prêt à dépenser\" propose des crédits à la consommation et souhaite créer un outil de “scoring crédit” pour calculer la probabilité qu’un client rembourse son crédit. C'est un outil d'aide à la décision pour aider la société à déterminer la solvabilité d'un client et de choisir si oui ou non elle accordera la demande de crédit.\n",
        "- Ce notebook vise à créer une base de données obtenues par l'aggrégation des différentes tables disponibles. Le résultat est exporté en format pq et contient les 30 variables les plus corrélées avec la variable cible et l'identifiant unique des crédits.\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XnuEOgORoSyi"
      },
      "source": [
        "# **I. Installation et mise en place de l'environnement de travail**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dawXLR8k49lH"
      },
      "outputs": [],
      "source": [
        "# Importation des librairies\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import sys, zipfile\n",
        "\n",
        "import datetime, time, gc\n",
        "from contextlib import contextmanager\n",
        "import warnings"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iCfGUiXL5cEc",
        "outputId": "79aeda6b-6fda-428e-8144-e67129084aca"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Version des librairies :\n",
            "Python        : 3.10.12 (main, Nov  6 2024, 20:22:13) [GCC 11.4.0]\n",
            "NumPy         : 1.26.4\n",
            "Pandas        : 2.2.2\n",
            "Run date      : 2025-01-11T09:16:54.639765\n"
          ]
        }
      ],
      "source": [
        "# Informations sur l'environnement virtuel\n",
        "print('Version des librairies :')\n",
        "print('Python        : ' + sys.version)\n",
        "print('NumPy         : ' + np.version.full_version)\n",
        "print('Pandas        : ' + pd.__version__)\n",
        "\n",
        "now  = datetime.datetime.now().isoformat()\n",
        "print('Run date      : ' + now)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A7jM53Y09R3J",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "daba274c-768c-4f7a-bf3f-5ac03036df8f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "# Connexion au drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fkXtsksb9niO"
      },
      "outputs": [],
      "source": [
        "# Dézipper les 10 fichiers\n",
        "\n",
        "##⚙️Changer les 2 chemins ci-dessous\n",
        "zip_path = '/content/drive/MyDrive/openclassrooms/project_list/project_7/data/datasets.zip'\n",
        "extract_path = '/content/drive/MyDrive/openclassrooms/project_list/project_7/data/'\n",
        "\n",
        "with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
        "    zip_ref.extractall(extract_path)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aWDdfIwH1qmZ"
      },
      "source": [
        "# **II. Création d'un dataframe unique**\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "La majorité des features finales sont obtenues en utilisant des fonctions d'aggrégation: min, max, mean, sum et var.\n",
        "\n",
        "Ici, dans un premier temps, les différents fichiers sont fusionnés pour obtenir un dataframe unique.\n",
        "\n",
        "La selection des features se fera dans un second temps.\n",
        "\n",
        "---\n",
        "\n",
        "Voici la méthode de processing utilisé:\n",
        "\n",
        "**Feature engineering**\n",
        "- One-hot encoding pour les features catégorielles\n",
        "- Transformation et ajout de certaines features en taux (annuity, income, payment_rate)\n",
        "- Dans la table Bureau Data, création de features spécifiques pour les crédits actifs et fermés\n",
        "- Dans la table Previous Applications, création de features spécifiques pour les demandes approvées ou refusées\n",
        "- La table test est utilisée\n",
        "\n",
        "**Structuration du code**\n",
        "- Une fonction par table (sauf bureau_balance)\n",
        "- La jointure s'effectue sur la table principale application df en utilisant la clé SK_ID_CURR (sauf pour la table bureau_balance)"
      ],
      "metadata": {
        "id": "MJRFUpZWCW1p"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **1. Création du dataframe final**"
      ],
      "metadata": {
        "id": "ipnUdkV-GAUo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **i. Fonctions**"
      ],
      "metadata": {
        "id": "I1ZiGO0GzsPw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# One-hot encoding des variables catégorielles avec get_dummies\n",
        "def one_hot_encoder(df, nan_as_category = True):\n",
        "    original_columns = list(df.columns)\n",
        "    categorical_columns = [col for col in df.columns if df[col].dtype == 'object']\n",
        "    df = pd.get_dummies(df, columns= categorical_columns, dummy_na= nan_as_category)\n",
        "    new_columns = [c for c in df.columns if c not in original_columns]\n",
        "    return df, new_columns"
      ],
      "metadata": {
        "id": "Ue4ysdXVleZX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CRy3rzIeYSSX"
      },
      "outputs": [],
      "source": [
        "# Preprocessing des tables application_train.csv et application_test.csv\n",
        "def application_train_test(num_rows = None, nan_as_category = False):\n",
        "    df_train = pd.read_csv('/content/drive/MyDrive/openclassrooms/project_list/project_7/data/application_train.csv', nrows= num_rows)\n",
        "    df_test = pd.read_csv('/content/drive/MyDrive/openclassrooms/project_list/project_7/data/application_test.csv', nrows= num_rows)\n",
        "    df = pd.concat([df_train, df_test], axis=0)\n",
        "    df = df[df['CODE_GENDER'] != 'XNA'] # Retirer les lignes dont le CODE_GENDER est XNA\n",
        "\n",
        "    # Encoding des features catégorielles binaires avec 0 ou 1\n",
        "    for bin_feature in ['CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY']:\n",
        "        df[bin_feature], uniques = pd.factorize(df[bin_feature])\n",
        "    # Encoding des features catégorielles\n",
        "    df, cat_cols = one_hot_encoder(df, nan_as_category)\n",
        "\n",
        "    # Remplacer en NaN les valeurs aberrantes de DAYS_EMPLOYED: 365.243 -> nan\n",
        "    df['DAYS_EMPLOYED'].replace(365243, np.nan, inplace= True)\n",
        "\n",
        "    # Créer des nouvelles features pourcentages\n",
        "    df['DAYS_EMPLOYED_PERC'] = df['DAYS_EMPLOYED'] / df['DAYS_BIRTH']\n",
        "    df['INCOME_CREDIT_PERC'] = df['AMT_INCOME_TOTAL'] / df['AMT_CREDIT']\n",
        "    df['INCOME_PER_PERSON'] = df['AMT_INCOME_TOTAL'] / df['CNT_FAM_MEMBERS']\n",
        "    df['ANNUITY_INCOME_PERC'] = df['AMT_ANNUITY'] / df['AMT_INCOME_TOTAL']\n",
        "    df['PAYMENT_RATE'] = df['AMT_ANNUITY'] / df['AMT_CREDIT']\n",
        "    gc.collect()\n",
        "    return df\n",
        "\n",
        "\n",
        "# Preprocessing des tables bureau.csv et bureau_balance.csv\n",
        "def bureau_and_balance(num_rows = None, nan_as_category = True):\n",
        "    bureau = pd.read_csv('/content/drive/MyDrive/openclassrooms/project_list/project_7/data/bureau.csv', nrows = num_rows)\n",
        "    bb = pd.read_csv('/content/drive/MyDrive/openclassrooms/project_list/project_7/data/bureau_balance.csv', nrows = num_rows)\n",
        "    bb, bb_cat = one_hot_encoder(bb, nan_as_category)\n",
        "    bureau, bureau_cat = one_hot_encoder(bureau, nan_as_category)\n",
        "\n",
        "    # Bureau balance: Aggrégation et merge avec bureau.csv\n",
        "    bb_aggregations = {'MONTHS_BALANCE': ['min', 'max', 'size']} # 3 nouvelles colonnes aggrégées min, max et size\n",
        "    for col in bb_cat:\n",
        "        bb_aggregations[col] = ['mean']\n",
        "    bb_agg = bb.groupby('SK_ID_BUREAU').agg(bb_aggregations)\n",
        "    bb_agg.columns = pd.Index([e[0] + \"_\" + e[1].upper() for e in bb_agg.columns.tolist()]) # Renommage des colonnes\n",
        "    bureau = bureau.join(bb_agg, how='left', on='SK_ID_BUREAU')\n",
        "    bureau.drop(['SK_ID_BUREAU'], axis=1, inplace= True)\n",
        "    del bb, bb_agg\n",
        "    gc.collect()\n",
        "\n",
        "    # Traitement des features numériques\n",
        "    num_aggregations = {\n",
        "        'DAYS_CREDIT': ['min', 'max', 'mean', 'var'],\n",
        "        'DAYS_CREDIT_ENDDATE': ['min', 'max', 'mean'],\n",
        "        'DAYS_CREDIT_UPDATE': ['mean'],\n",
        "        'CREDIT_DAY_OVERDUE': ['max', 'mean'],\n",
        "        'AMT_CREDIT_MAX_OVERDUE': ['mean'],\n",
        "        'AMT_CREDIT_SUM': ['max', 'mean', 'sum'],\n",
        "        'AMT_CREDIT_SUM_DEBT': ['max', 'mean', 'sum'],\n",
        "        'AMT_CREDIT_SUM_OVERDUE': ['mean'],\n",
        "        'AMT_CREDIT_SUM_LIMIT': ['mean', 'sum'],\n",
        "        'AMT_ANNUITY': ['max', 'mean'],\n",
        "        'CNT_CREDIT_PROLONG': ['sum'],\n",
        "        'MONTHS_BALANCE_MIN': ['min'],\n",
        "        'MONTHS_BALANCE_MAX': ['max'],\n",
        "        'MONTHS_BALANCE_SIZE': ['mean', 'sum']\n",
        "    }\n",
        "\n",
        "    # Traitement des features catégorielles\n",
        "    cat_aggregations = {}\n",
        "    for cat in bureau_cat: cat_aggregations[cat] = ['mean']\n",
        "    for cat in bb_cat: cat_aggregations[cat + \"_MEAN\"] = ['mean']\n",
        "    bureau_agg = bureau.groupby('SK_ID_CURR').agg({**num_aggregations, **cat_aggregations})\n",
        "    bureau_agg.columns = pd.Index(['BURO_' + e[0] + \"_\" + e[1].upper() for e in bureau_agg.columns.tolist()])\n",
        "\n",
        "    # Séparation des crédits actifs et des crédits passés (historique)\n",
        "    ## Bureau: Crédit actif (aggrégation numérique uniquement)\n",
        "    active = bureau[bureau['CREDIT_ACTIVE_Active'] == 1]\n",
        "    active_agg = active.groupby('SK_ID_CURR').agg(num_aggregations)\n",
        "    active_agg.columns = pd.Index(['ACTIVE_' + e[0] + \"_\" + e[1].upper() for e in active_agg.columns.tolist()])\n",
        "    bureau_agg = bureau_agg.join(active_agg, how='left', on='SK_ID_CURR')\n",
        "    del active, active_agg\n",
        "    gc.collect()\n",
        "    ## Bureau: Crédit passé (aggrégation numérique uniquement)\n",
        "    closed = bureau[bureau['CREDIT_ACTIVE_Closed'] == 1]\n",
        "    closed_agg = closed.groupby('SK_ID_CURR').agg(num_aggregations)\n",
        "    closed_agg.columns = pd.Index(['CLOSED_' + e[0] + \"_\" + e[1].upper() for e in closed_agg.columns.tolist()])\n",
        "    bureau_agg = bureau_agg.join(closed_agg, how='left', on='SK_ID_CURR')\n",
        "    del closed, closed_agg, bureau\n",
        "    gc.collect()\n",
        "    return bureau_agg\n",
        "\n",
        "# Preprocessing de la table previous_applications.csv\n",
        "def previous_applications(num_rows = None, nan_as_category = True):\n",
        "    prev = pd.read_csv('/content/drive/MyDrive/openclassrooms/project_list/project_7/data/previous_application.csv', nrows = num_rows)\n",
        "    prev, cat_cols = one_hot_encoder(prev, nan_as_category= True)\n",
        "    # Days 365.243 values -> nan\n",
        "    prev['DAYS_FIRST_DRAWING'].replace(365243, np.nan, inplace= True)\n",
        "    prev['DAYS_FIRST_DUE'].replace(365243, np.nan, inplace= True)\n",
        "    prev['DAYS_LAST_DUE_1ST_VERSION'].replace(365243, np.nan, inplace= True)\n",
        "    prev['DAYS_LAST_DUE'].replace(365243, np.nan, inplace= True)\n",
        "    prev['DAYS_TERMINATION'].replace(365243, np.nan, inplace= True)\n",
        "    # Création d'une variable pourcentage: montant crédit demandé / montant crédit reçu\n",
        "    prev['APP_CREDIT_PERC'] = prev['AMT_APPLICATION'] / prev['AMT_CREDIT']\n",
        "    # Features numériques\n",
        "    num_aggregations = {\n",
        "        'AMT_ANNUITY': ['min', 'max', 'mean'],\n",
        "        'AMT_APPLICATION': ['min', 'max', 'mean'],\n",
        "        'AMT_CREDIT': ['min', 'max', 'mean'],\n",
        "        'APP_CREDIT_PERC': ['min', 'max', 'mean', 'var'],\n",
        "        'AMT_DOWN_PAYMENT': ['min', 'max', 'mean'],\n",
        "        'AMT_GOODS_PRICE': ['min', 'max', 'mean'],\n",
        "        'HOUR_APPR_PROCESS_START': ['min', 'max', 'mean'],\n",
        "        'RATE_DOWN_PAYMENT': ['min', 'max', 'mean'],\n",
        "        'DAYS_DECISION': ['min', 'max', 'mean'],\n",
        "        'CNT_PAYMENT': ['mean', 'sum'],\n",
        "    }\n",
        "    # Features catégorielles\n",
        "    cat_aggregations = {}\n",
        "    for cat in cat_cols:\n",
        "        cat_aggregations[cat] = ['mean']\n",
        "\n",
        "    prev_agg = prev.groupby('SK_ID_CURR').agg({**num_aggregations, **cat_aggregations})\n",
        "    prev_agg.columns = pd.Index(['PREV_' + e[0] + \"_\" + e[1].upper() for e in prev_agg.columns.tolist()])\n",
        "    # Séparation des demande approuvées et des demandes refusées\n",
        "    ## Approved Applications (aggrégation numérique uniquement)\n",
        "    approved = prev[prev['NAME_CONTRACT_STATUS_Approved'] == 1]\n",
        "    approved_agg = approved.groupby('SK_ID_CURR').agg(num_aggregations)\n",
        "    approved_agg.columns = pd.Index(['APPROVED_' + e[0] + \"_\" + e[1].upper() for e in approved_agg.columns.tolist()])\n",
        "    prev_agg = prev_agg.join(approved_agg, how='left', on='SK_ID_CURR')\n",
        "    ## Refused Applications (aggrégation numérique uniquement)\n",
        "    refused = prev[prev['NAME_CONTRACT_STATUS_Refused'] == 1]\n",
        "    refused_agg = refused.groupby('SK_ID_CURR').agg(num_aggregations)\n",
        "    refused_agg.columns = pd.Index(['REFUSED_' + e[0] + \"_\" + e[1].upper() for e in refused_agg.columns.tolist()])\n",
        "    prev_agg = prev_agg.join(refused_agg, how='left', on='SK_ID_CURR')\n",
        "    del refused, refused_agg, approved, approved_agg, prev\n",
        "    gc.collect()\n",
        "    return prev_agg\n",
        "\n",
        "# Preprocessing de la table POS_CASH_balance.csv\n",
        "def pos_cash(num_rows = None, nan_as_category = True):\n",
        "    pos = pd.read_csv('/content/drive/MyDrive/openclassrooms/project_list/project_7/data/POS_CASH_balance.csv', nrows = num_rows)\n",
        "    pos, cat_cols = one_hot_encoder(pos, nan_as_category= True)\n",
        "    # Aggrégation\n",
        "    aggregations = {\n",
        "        'MONTHS_BALANCE': ['max', 'mean', 'size'],\n",
        "        'SK_DPD': ['max', 'mean'],\n",
        "        'SK_DPD_DEF': ['max', 'mean']\n",
        "    }\n",
        "    for cat in cat_cols:\n",
        "        aggregations[cat] = ['mean']\n",
        "\n",
        "    pos_agg = pos.groupby('SK_ID_CURR').agg(aggregations)\n",
        "    pos_agg.columns = pd.Index(['POS_' + e[0] + \"_\" + e[1].upper() for e in pos_agg.columns.tolist()])\n",
        "    # Compter le nombre de comptes pos cash\n",
        "    pos_agg['POS_COUNT'] = pos.groupby('SK_ID_CURR').size()\n",
        "    del pos\n",
        "    gc.collect()\n",
        "    return pos_agg\n",
        "\n",
        "# Preprocessing de la table installments_payments.csv\n",
        "def installments_payments(num_rows = None, nan_as_category = True):\n",
        "    ins = pd.read_csv('/content/drive/MyDrive/openclassrooms/project_list/project_7/data/installments_payments.csv', nrows = num_rows)\n",
        "    ins, cat_cols = one_hot_encoder(ins, nan_as_category= True)\n",
        "    # Pourcentage et différence entre ce qui est payé et le montant du versement dû\n",
        "    ins['PAYMENT_PERC'] = ins['AMT_PAYMENT'] / ins['AMT_INSTALMENT']\n",
        "    ins['PAYMENT_DIFF'] = ins['AMT_INSTALMENT'] - ins['AMT_PAYMENT']\n",
        "    # Jours de retard (Days past due) et jours d'avance (days before due) (no negative values)\n",
        "    ins['DPD'] = ins['DAYS_ENTRY_PAYMENT'] - ins['DAYS_INSTALMENT']\n",
        "    ins['DBD'] = ins['DAYS_INSTALMENT'] - ins['DAYS_ENTRY_PAYMENT']\n",
        "    ins['DPD'] = ins['DPD'].apply(lambda x: x if x > 0 else 0)\n",
        "    ins['DBD'] = ins['DBD'].apply(lambda x: x if x > 0 else 0)\n",
        "    # Aggrégation\n",
        "    aggregations = {\n",
        "        'NUM_INSTALMENT_VERSION': ['nunique'],\n",
        "        'DPD': ['max', 'mean', 'sum'],\n",
        "        'DBD': ['max', 'mean', 'sum'],\n",
        "        'PAYMENT_PERC': ['max', 'mean', 'sum', 'var'],\n",
        "        'PAYMENT_DIFF': ['max', 'mean', 'sum', 'var'],\n",
        "        'AMT_INSTALMENT': ['max', 'mean', 'sum'],\n",
        "        'AMT_PAYMENT': ['min', 'max', 'mean', 'sum'],\n",
        "        'DAYS_ENTRY_PAYMENT': ['max', 'mean', 'sum']\n",
        "    }\n",
        "    for cat in cat_cols:\n",
        "        aggregations[cat] = ['mean']\n",
        "    ins_agg = ins.groupby('SK_ID_CURR').agg(aggregations)\n",
        "    ins_agg.columns = pd.Index(['INSTAL_' + e[0] + \"_\" + e[1].upper() for e in ins_agg.columns.tolist()])\n",
        "    # Compter le nombre de versements\n",
        "    ins_agg['INSTAL_COUNT'] = ins.groupby('SK_ID_CURR').size()\n",
        "    del ins\n",
        "    gc.collect()\n",
        "    return ins_agg\n",
        "\n",
        "# Preprocessing de la table credit_card_balance.csv\n",
        "def credit_card_balance(num_rows = None, nan_as_category = True):\n",
        "    cc = pd.read_csv('/content/drive/MyDrive/openclassrooms/project_list/project_7/data/credit_card_balance.csv', nrows = num_rows)\n",
        "    cc, cat_cols = one_hot_encoder(cc, nan_as_category= True)\n",
        "    # Aggrégation\n",
        "    cc.drop(['SK_ID_PREV'], axis= 1, inplace = True)\n",
        "    cc_agg = cc.groupby('SK_ID_CURR').agg(['min', 'max', 'mean', 'sum', 'var'])\n",
        "    cc_agg.columns = pd.Index(['CC_' + e[0] + \"_\" + e[1].upper() for e in cc_agg.columns.tolist()])\n",
        "    # Nombre de cartes de crédit\n",
        "    cc_agg['CC_COUNT'] = cc.groupby('SK_ID_CURR').size()\n",
        "    del cc\n",
        "    gc.collect()\n",
        "    return cc_agg"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **ii. Création du dataframe**"
      ],
      "metadata": {
        "id": "rpl_f19qzvLe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Pour ne pas afficher les messages d'erreurs des obsolescences futures\n",
        "warnings.simplefilter(action='ignore', category=FutureWarning)\n",
        "\n",
        "# Ajout d'un gestionnaire de contexte pour définir une entrée et une sortie autour d’un bloc de code\n",
        "## Gère les ressources de manière sûre et propre (comme l’ouverture et la fermeture de fichiers, la gestion de connexions, ou la mesure de temps).\n",
        "@contextmanager\n",
        "def timer(title):\n",
        "    t0 = time.time()\n",
        "    yield # Exécute le code du bloc with\n",
        "    print(\"{} - done in {:.0f}s\".format(title, time.time() - t0))\n",
        "\n",
        "def main(debug = False):\n",
        "    num_rows = 10000 if debug else None\n",
        "    df = application_train_test(num_rows)\n",
        "    with timer(\"Process bureau and bureau_balance\"):\n",
        "        bureau = bureau_and_balance(num_rows)\n",
        "        print(\"Bureau df shape:\", bureau.shape)\n",
        "        df = df.join(bureau, how='left', on='SK_ID_CURR')\n",
        "        del bureau\n",
        "        gc.collect()\n",
        "    with timer(\"Process previous_applications\"):\n",
        "        prev = previous_applications(num_rows)\n",
        "        print(\"Previous applications df shape:\", prev.shape)\n",
        "        df = df.join(prev, how='left', on='SK_ID_CURR')\n",
        "        del prev\n",
        "        gc.collect()\n",
        "    with timer(\"Process POS-CASH balance\"):\n",
        "        pos = pos_cash(num_rows)\n",
        "        print(\"Pos-cash balance df shape:\", pos.shape)\n",
        "        df = df.join(pos, how='left', on='SK_ID_CURR')\n",
        "        del pos\n",
        "        gc.collect()\n",
        "    with timer(\"Process installments payments\"):\n",
        "        ins = installments_payments(num_rows)\n",
        "        print(\"Installments payments df shape:\", ins.shape)\n",
        "        df = df.join(ins, how='left', on='SK_ID_CURR')\n",
        "        del ins\n",
        "        gc.collect()\n",
        "    with timer(\"Process credit card balance\"):\n",
        "        cc = credit_card_balance(num_rows)\n",
        "        print(\"Credit card balance df shape:\", cc.shape)\n",
        "        df = df.join(cc, how='left', on='SK_ID_CURR')\n",
        "        del cc\n",
        "        gc.collect()\n",
        "    return df\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    with timer(\"Full model run\"):\n",
        "        df = main()"
      ],
      "metadata": {
        "id": "MiYVYWLwxmFJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1a1a76b8-8ce3-4dc9-c8df-ead724e65e62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bureau df shape: (305811, 116)\n",
            "Process bureau and bureau_balance - done in 44s\n",
            "Previous applications df shape: (338857, 249)\n",
            "Process previous_applications - done in 59s\n",
            "Pos-cash balance df shape: (337252, 18)\n",
            "Process POS-CASH balance - done in 28s\n",
            "Installments payments df shape: (339587, 26)\n",
            "Process installments payments - done in 48s\n",
            "Credit card balance df shape: (103558, 141)\n",
            "Process credit card balance - done in 45s\n",
            "Full model run - done in 249s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Vérifier le fichier obtenu\n",
        "print(\"Dimension:\", df.shape)\n",
        "df.head(5)"
      ],
      "metadata": {
        "id": "kvr4LkVZIxcT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 274
        },
        "outputId": "5d737f60-0c0f-4b67-8376-c5ce94a659c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dimension: (356251, 797)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   SK_ID_CURR  TARGET  CODE_GENDER  FLAG_OWN_CAR  FLAG_OWN_REALTY  \\\n",
              "0      100002     1.0            0             0                0   \n",
              "1      100003     0.0            1             0                1   \n",
              "2      100004     0.0            0             1                0   \n",
              "3      100006     0.0            1             0                0   \n",
              "4      100007     0.0            0             0                0   \n",
              "\n",
              "   CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  AMT_ANNUITY  AMT_GOODS_PRICE  \\\n",
              "0             0          202500.0    406597.5      24700.5         351000.0   \n",
              "1             0          270000.0   1293502.5      35698.5        1129500.0   \n",
              "2             0           67500.0    135000.0       6750.0         135000.0   \n",
              "3             0          135000.0    312682.5      29686.5         297000.0   \n",
              "4             0          121500.0    513000.0      21865.5         513000.0   \n",
              "\n",
              "   ...  CC_NAME_CONTRACT_STATUS_Signed_MAX  \\\n",
              "0  ...                                 NaN   \n",
              "1  ...                                 NaN   \n",
              "2  ...                                 NaN   \n",
              "3  ...                               False   \n",
              "4  ...                                 NaN   \n",
              "\n",
              "   CC_NAME_CONTRACT_STATUS_Signed_MEAN  CC_NAME_CONTRACT_STATUS_Signed_SUM  \\\n",
              "0                                  NaN                                 NaN   \n",
              "1                                  NaN                                 NaN   \n",
              "2                                  NaN                                 NaN   \n",
              "3                                  0.0                                 0.0   \n",
              "4                                  NaN                                 NaN   \n",
              "\n",
              "   CC_NAME_CONTRACT_STATUS_Signed_VAR  CC_NAME_CONTRACT_STATUS_nan_MIN  \\\n",
              "0                                 NaN                              NaN   \n",
              "1                                 NaN                              NaN   \n",
              "2                                 NaN                              NaN   \n",
              "3                                 0.0                            False   \n",
              "4                                 NaN                              NaN   \n",
              "\n",
              "   CC_NAME_CONTRACT_STATUS_nan_MAX  CC_NAME_CONTRACT_STATUS_nan_MEAN  \\\n",
              "0                              NaN                               NaN   \n",
              "1                              NaN                               NaN   \n",
              "2                              NaN                               NaN   \n",
              "3                            False                               0.0   \n",
              "4                              NaN                               NaN   \n",
              "\n",
              "   CC_NAME_CONTRACT_STATUS_nan_SUM  CC_NAME_CONTRACT_STATUS_nan_VAR  CC_COUNT  \n",
              "0                              NaN                              NaN       NaN  \n",
              "1                              NaN                              NaN       NaN  \n",
              "2                              NaN                              NaN       NaN  \n",
              "3                              0.0                              0.0       6.0  \n",
              "4                              NaN                              NaN       NaN  \n",
              "\n",
              "[5 rows x 797 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b63ae629-65ef-41fc-93be-0986475217cc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SK_ID_CURR</th>\n",
              "      <th>TARGET</th>\n",
              "      <th>CODE_GENDER</th>\n",
              "      <th>FLAG_OWN_CAR</th>\n",
              "      <th>FLAG_OWN_REALTY</th>\n",
              "      <th>CNT_CHILDREN</th>\n",
              "      <th>AMT_INCOME_TOTAL</th>\n",
              "      <th>AMT_CREDIT</th>\n",
              "      <th>AMT_ANNUITY</th>\n",
              "      <th>AMT_GOODS_PRICE</th>\n",
              "      <th>...</th>\n",
              "      <th>CC_NAME_CONTRACT_STATUS_Signed_MAX</th>\n",
              "      <th>CC_NAME_CONTRACT_STATUS_Signed_MEAN</th>\n",
              "      <th>CC_NAME_CONTRACT_STATUS_Signed_SUM</th>\n",
              "      <th>CC_NAME_CONTRACT_STATUS_Signed_VAR</th>\n",
              "      <th>CC_NAME_CONTRACT_STATUS_nan_MIN</th>\n",
              "      <th>CC_NAME_CONTRACT_STATUS_nan_MAX</th>\n",
              "      <th>CC_NAME_CONTRACT_STATUS_nan_MEAN</th>\n",
              "      <th>CC_NAME_CONTRACT_STATUS_nan_SUM</th>\n",
              "      <th>CC_NAME_CONTRACT_STATUS_nan_VAR</th>\n",
              "      <th>CC_COUNT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100002</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>202500.0</td>\n",
              "      <td>406597.5</td>\n",
              "      <td>24700.5</td>\n",
              "      <td>351000.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>100003</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>270000.0</td>\n",
              "      <td>1293502.5</td>\n",
              "      <td>35698.5</td>\n",
              "      <td>1129500.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>100004</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>67500.0</td>\n",
              "      <td>135000.0</td>\n",
              "      <td>6750.0</td>\n",
              "      <td>135000.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>100006</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>135000.0</td>\n",
              "      <td>312682.5</td>\n",
              "      <td>29686.5</td>\n",
              "      <td>297000.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>100007</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>121500.0</td>\n",
              "      <td>513000.0</td>\n",
              "      <td>21865.5</td>\n",
              "      <td>513000.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 797 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b63ae629-65ef-41fc-93be-0986475217cc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b63ae629-65ef-41fc-93be-0986475217cc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b63ae629-65ef-41fc-93be-0986475217cc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b388af56-0735-441a-bfc6-a157c25be7e2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b388af56-0735-441a-bfc6-a157c25be7e2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b388af56-0735-441a-bfc6-a157c25be7e2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# # Exportation des données aggrégées avec toutes les variables\n",
        "df_train = df[~df[\"TARGET\"].isna()]\n",
        "# df_train.to_parquet('/content/drive/MyDrive/openclassrooms/project_list/project_7/data/aggregated_df.pq', index=False)\n",
        "df_test = df[df[\"TARGET\"].isna()]\n",
        "# df_test.to_parquet('/content/drive/MyDrive/openclassrooms/project_list/project_7/data/aggregated_df_test.pq', index=False) #Pour le data drift"
      ],
      "metadata": {
        "id": "rCSu_OzgGjGG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **2. Choix des variables finales et exportation du fichier**"
      ],
      "metadata": {
        "id": "no4x6MInGMPq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Il y a un nombre important de variables features (796).\n",
        "\n",
        "Pour choisir les variables à conserver, on peut prendre les variables les plus corrélées ou faire un random forest.\n",
        "\n",
        "J'ai choisi de conserver les 30 variables les plus corrélées avec la variable target.\n",
        "\n",
        "Dans un premier temps, je sélectionne les 100 variables les plus corrélées à la variable TARGET. Ensuite je retire les variables features corrélées entre elles. Enfin, je choisis les 30 variables les plus corrélées de cette liste avec la variable TARGET."
      ],
      "metadata": {
        "id": "a4ztPNO6wPDJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **i. Fonction**"
      ],
      "metadata": {
        "id": "7qQkoOoRzcOr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def select_uncorrelated_features(df, features_list, threshold=0.8):\n",
        "    \"\"\"\n",
        "    Sélectionne les features non corrélées parmi une liste spécifique de features.\n",
        "\n",
        "    Parameters:\n",
        "        df (pd.DataFrame): DataFrame contenant toutes les variables\n",
        "        features_list (list): Liste des features à analyser\n",
        "        threshold (float): Seuil de corrélation (défaut: 0.8)\n",
        "        plot (bool): Si True, affiche la heatmap des corrélations\n",
        "\n",
        "    Returns:\n",
        "        list: Liste des features sélectionnées\n",
        "    \"\"\"\n",
        "    correlation_matrix = df[features_list].corr().abs()\n",
        "\n",
        "    # Création de la matrice triangulaire supérieure\n",
        "    upper = correlation_matrix.where(\n",
        "        np.triu(np.ones(correlation_matrix.shape), k=1).astype(bool)\n",
        "    )\n",
        "\n",
        "    # Identification des colonnes à supprimer\n",
        "    to_drop = [column for column in upper.columns\n",
        "               if any(upper[column] > threshold)]\n",
        "    return list(set(features_list) - set(to_drop))"
      ],
      "metadata": {
        "id": "6WGwofVszXta"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **ii. Sélection des variables**"
      ],
      "metadata": {
        "id": "1HbTY9iDzi7w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Utilisation des données du fichiers application_train uniquement\n",
        "# Trouver les 100 variables les plus corrélées avec la variable target pour sélectionner les variables features #10min\n",
        "correlations = df_train.corr()['TARGET'].sort_values()\n",
        "most_100_corrolated_features = abs(correlations).sort_values(ascending=False).head(101)\n",
        "print('Variables les plus corrélées en valeur absolue:\\n', most_100_corrolated_features)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EPoh1MKQRmoS",
        "outputId": "ca7efea7-4e00-4c3a-9bc7-f486944ed661"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Variables les plus corrélées en valeur absolue:\n",
            " TARGET                                  1.000000\n",
            "EXT_SOURCE_3                            0.178926\n",
            "EXT_SOURCE_2                            0.160471\n",
            "EXT_SOURCE_1                            0.155317\n",
            "CC_CNT_DRAWINGS_ATM_CURRENT_MEAN        0.107692\n",
            "                                          ...   \n",
            "APPROVED_HOUR_APPR_PROCESS_START_MAX    0.043431\n",
            "ACTIVE_DAYS_CREDIT_MIN                  0.043232\n",
            "FLOORSMAX_MODE                          0.043231\n",
            "OCCUPATION_TYPE_Laborers                0.043017\n",
            "PREV_NAME_YIELD_GROUP_XNA_MEAN          0.042851\n",
            "Name: TARGET, Length: 101, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Pas de variable excessivement corrélée à la variable cible."
      ],
      "metadata": {
        "id": "V56GHcIaTrI6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Retirer les variables features trop corrélées entre elles\n",
        "list_most_100_corrolated_features = most_100_corrolated_features.reset_index()['index'].to_list()\n",
        "list_most_100_corrolated_features.remove(\"TARGET\")\n",
        "selected_features = select_uncorrelated_features(df_train, list_most_100_corrolated_features, threshold=0.7)\n",
        "selected_features.append('TARGET')\n",
        "print(len(selected_features))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ePLHJR-Nepud",
        "outputId": "433f8fd2-6c5a-4e65-a68f-78e955b08495"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "45\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Sélection finale des 30 variables features\n",
        "correlations = df_train[selected_features].corr()['TARGET'].sort_values()\n",
        "selected_30_features = abs(correlations).sort_values(ascending=False).head(31)\n",
        "print('Variables les plus corrélées en valeur absolue:\\n', selected_30_features)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P02II16IwsTI",
        "outputId": "893dbb00-aa0d-45b5-9845-3e5dc404ceec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Variables les plus corrélées en valeur absolue:\n",
            " TARGET                                    1.000000\n",
            "EXT_SOURCE_3                              0.178926\n",
            "EXT_SOURCE_2                              0.160471\n",
            "EXT_SOURCE_1                              0.155317\n",
            "CC_CNT_DRAWINGS_ATM_CURRENT_MEAN          0.107692\n",
            "CC_CNT_DRAWINGS_CURRENT_MAX               0.101389\n",
            "BURO_DAYS_CREDIT_MEAN                     0.089731\n",
            "CC_AMT_BALANCE_MEAN                       0.087177\n",
            "BURO_CREDIT_ACTIVE_Closed_MEAN            0.079369\n",
            "DAYS_BIRTH                                0.078242\n",
            "PREV_NAME_CONTRACT_STATUS_Refused_MEAN    0.077681\n",
            "DAYS_EMPLOYED                             0.074957\n",
            "REFUSED_DAYS_DECISION_MAX                 0.064230\n",
            "CC_AMT_BALANCE_MIN                        0.064163\n",
            "CC_CNT_DRAWINGS_ATM_CURRENT_MAX           0.063729\n",
            "CC_MONTHS_BALANCE_MEAN                    0.062081\n",
            "BURO_STATUS_1_MEAN_MEAN                   0.061183\n",
            "CC_CNT_DRAWINGS_ATM_CURRENT_VAR           0.061123\n",
            "REGION_RATING_CLIENT_W_CITY               0.060895\n",
            "CC_AMT_DRAWINGS_CURRENT_MEAN              0.058732\n",
            "NAME_INCOME_TYPE_Working                  0.057483\n",
            "PREV_NAME_PRODUCT_TYPE_walk-in_MEAN       0.057412\n",
            "NAME_EDUCATION_TYPE_Higher education      0.056593\n",
            "BURO_STATUS_C_MEAN_MEAN                   0.055936\n",
            "PREV_CODE_REJECT_REASON_SCOFR_MEAN        0.055867\n",
            "DAYS_LAST_PHONE_CHANGE                    0.055219\n",
            "CODE_GENDER                               0.054710\n",
            "APPROVED_DAYS_DECISION_MIN                0.053512\n",
            "REFUSED_HOUR_APPR_PROCESS_START_MIN       0.051747\n",
            "DAYS_ID_PUBLISH                           0.051457\n",
            "REG_CITY_NOT_WORK_CITY                    0.050992\n",
            "Name: TARGET, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exportation des données aggrégées avec les 30 variables features les plus corrélées à la variable target\n",
        "list_selected_30_features = selected_30_features.reset_index()['index'].to_list() #en liste\n",
        "list_selected_30_features.append('SK_ID_CURR') #Ajouter les ID unique des crédits demandés\n",
        "df_train[list_selected_30_features].to_parquet('/content/drive/MyDrive/openclassrooms/project_list/project_7/data/aggregated_df_30_variables.pq', index=False)\n",
        "df_test[list_selected_30_features].to_parquet('/content/drive/MyDrive/openclassrooms/project_list/project_7/data/aggregated_df_30_variables_test.pq', index=False)"
      ],
      "metadata": {
        "id": "Q5MmaSYPbG32"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_train[list_selected_30_features].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "id": "4Y1oL3C7uuVX",
        "outputId": "007d0012-5e36-4277-86d1-dec6d609bbfa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   TARGET  EXT_SOURCE_3  EXT_SOURCE_2  EXT_SOURCE_1  \\\n",
              "0     1.0      0.139376      0.262949      0.083037   \n",
              "1     0.0           NaN      0.622246      0.311267   \n",
              "2     0.0      0.729567      0.555912           NaN   \n",
              "3     0.0           NaN      0.650442           NaN   \n",
              "4     0.0           NaN      0.322738           NaN   \n",
              "\n",
              "   CC_CNT_DRAWINGS_ATM_CURRENT_MEAN  CC_CNT_DRAWINGS_CURRENT_MAX  \\\n",
              "0                               NaN                          NaN   \n",
              "1                               NaN                          NaN   \n",
              "2                               NaN                          NaN   \n",
              "3                               NaN                          0.0   \n",
              "4                               NaN                          NaN   \n",
              "\n",
              "   BURO_DAYS_CREDIT_MEAN  CC_AMT_BALANCE_MEAN  BURO_CREDIT_ACTIVE_Closed_MEAN  \\\n",
              "0                -874.00                  NaN                            0.75   \n",
              "1               -1400.75                  NaN                            0.75   \n",
              "2                -867.00                  NaN                            1.00   \n",
              "3                    NaN                  0.0                             NaN   \n",
              "4               -1149.00                  NaN                            1.00   \n",
              "\n",
              "   DAYS_BIRTH  ...  NAME_EDUCATION_TYPE_Higher education  \\\n",
              "0       -9461  ...                                 False   \n",
              "1      -16765  ...                                  True   \n",
              "2      -19046  ...                                 False   \n",
              "3      -19005  ...                                 False   \n",
              "4      -19932  ...                                 False   \n",
              "\n",
              "   BURO_STATUS_C_MEAN_MEAN  PREV_CODE_REJECT_REASON_SCOFR_MEAN  \\\n",
              "0                 0.175426                                 0.0   \n",
              "1                      NaN                                 0.0   \n",
              "2                      NaN                                 0.0   \n",
              "3                      NaN                                 0.0   \n",
              "4                      NaN                                 0.0   \n",
              "\n",
              "   DAYS_LAST_PHONE_CHANGE  CODE_GENDER  APPROVED_DAYS_DECISION_MIN  \\\n",
              "0                 -1134.0            0                      -606.0   \n",
              "1                  -828.0            1                     -2341.0   \n",
              "2                  -815.0            0                      -815.0   \n",
              "3                  -617.0            1                      -617.0   \n",
              "4                 -1106.0            0                     -2357.0   \n",
              "\n",
              "   REFUSED_HOUR_APPR_PROCESS_START_MIN  DAYS_ID_PUBLISH  \\\n",
              "0                                  NaN            -2120   \n",
              "1                                  NaN             -291   \n",
              "2                                  NaN            -2531   \n",
              "3                                 15.0            -2437   \n",
              "4                                  NaN            -3458   \n",
              "\n",
              "   REG_CITY_NOT_WORK_CITY  SK_ID_CURR  \n",
              "0                       0      100002  \n",
              "1                       0      100003  \n",
              "2                       0      100004  \n",
              "3                       0      100006  \n",
              "4                       1      100007  \n",
              "\n",
              "[5 rows x 32 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ccf8078d-25da-4c20-8942-c47f5f71f0af\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TARGET</th>\n",
              "      <th>EXT_SOURCE_3</th>\n",
              "      <th>EXT_SOURCE_2</th>\n",
              "      <th>EXT_SOURCE_1</th>\n",
              "      <th>CC_CNT_DRAWINGS_ATM_CURRENT_MEAN</th>\n",
              "      <th>CC_CNT_DRAWINGS_CURRENT_MAX</th>\n",
              "      <th>BURO_DAYS_CREDIT_MEAN</th>\n",
              "      <th>CC_AMT_BALANCE_MEAN</th>\n",
              "      <th>BURO_CREDIT_ACTIVE_Closed_MEAN</th>\n",
              "      <th>DAYS_BIRTH</th>\n",
              "      <th>...</th>\n",
              "      <th>NAME_EDUCATION_TYPE_Higher education</th>\n",
              "      <th>BURO_STATUS_C_MEAN_MEAN</th>\n",
              "      <th>PREV_CODE_REJECT_REASON_SCOFR_MEAN</th>\n",
              "      <th>DAYS_LAST_PHONE_CHANGE</th>\n",
              "      <th>CODE_GENDER</th>\n",
              "      <th>APPROVED_DAYS_DECISION_MIN</th>\n",
              "      <th>REFUSED_HOUR_APPR_PROCESS_START_MIN</th>\n",
              "      <th>DAYS_ID_PUBLISH</th>\n",
              "      <th>REG_CITY_NOT_WORK_CITY</th>\n",
              "      <th>SK_ID_CURR</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.139376</td>\n",
              "      <td>0.262949</td>\n",
              "      <td>0.083037</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-874.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.75</td>\n",
              "      <td>-9461</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>0.175426</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1134.0</td>\n",
              "      <td>0</td>\n",
              "      <td>-606.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-2120</td>\n",
              "      <td>0</td>\n",
              "      <td>100002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.622246</td>\n",
              "      <td>0.311267</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-1400.75</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.75</td>\n",
              "      <td>-16765</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-828.0</td>\n",
              "      <td>1</td>\n",
              "      <td>-2341.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-291</td>\n",
              "      <td>0</td>\n",
              "      <td>100003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.729567</td>\n",
              "      <td>0.555912</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-867.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.00</td>\n",
              "      <td>-19046</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-815.0</td>\n",
              "      <td>0</td>\n",
              "      <td>-815.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-2531</td>\n",
              "      <td>0</td>\n",
              "      <td>100004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.650442</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-19005</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-617.0</td>\n",
              "      <td>1</td>\n",
              "      <td>-617.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>-2437</td>\n",
              "      <td>0</td>\n",
              "      <td>100006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.322738</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-1149.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.00</td>\n",
              "      <td>-19932</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1106.0</td>\n",
              "      <td>0</td>\n",
              "      <td>-2357.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-3458</td>\n",
              "      <td>1</td>\n",
              "      <td>100007</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 32 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ccf8078d-25da-4c20-8942-c47f5f71f0af')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ccf8078d-25da-4c20-8942-c47f5f71f0af button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ccf8078d-25da-4c20-8942-c47f5f71f0af');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c6a18dc3-4cf2-429f-bc9c-8586524f77ba\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c6a18dc3-4cf2-429f-bc9c-8586524f77ba')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c6a18dc3-4cf2-429f-bc9c-8586524f77ba button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test[list_selected_30_features].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "id": "me31r4q8u3DL",
        "outputId": "54da9c1e-a1d6-4e6e-dec8-907d8900472e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   TARGET  EXT_SOURCE_3  EXT_SOURCE_2  EXT_SOURCE_1  \\\n",
              "0     NaN      0.159520      0.789654      0.752614   \n",
              "1     NaN      0.432962      0.291656      0.564990   \n",
              "2     NaN      0.610991      0.699787           NaN   \n",
              "3     NaN      0.612704      0.509677      0.525734   \n",
              "4     NaN           NaN      0.425687      0.202145   \n",
              "\n",
              "   CC_CNT_DRAWINGS_ATM_CURRENT_MEAN  CC_CNT_DRAWINGS_CURRENT_MAX  \\\n",
              "0                               NaN                          NaN   \n",
              "1                               NaN                          NaN   \n",
              "2                          0.255556                          7.0   \n",
              "3                          0.045455                         12.0   \n",
              "4                               NaN                          NaN   \n",
              "\n",
              "   BURO_DAYS_CREDIT_MEAN  CC_AMT_BALANCE_MEAN  BURO_CREDIT_ACTIVE_Closed_MEAN  \\\n",
              "0            -735.000000                  NaN                        0.571429   \n",
              "1            -190.666667                  NaN                        0.333333   \n",
              "2           -1737.500000         18159.919219                        1.000000   \n",
              "3           -1401.750000          8085.058163                        0.583333   \n",
              "4                    NaN                  NaN                             NaN   \n",
              "\n",
              "   DAYS_BIRTH  ...  NAME_EDUCATION_TYPE_Higher education  \\\n",
              "0      -19241  ...                                  True   \n",
              "1      -18064  ...                                 False   \n",
              "2      -20038  ...                                  True   \n",
              "3      -13976  ...                                 False   \n",
              "4      -13040  ...                                 False   \n",
              "\n",
              "   BURO_STATUS_C_MEAN_MEAN  PREV_CODE_REJECT_REASON_SCOFR_MEAN  \\\n",
              "0                 0.441240                                 0.0   \n",
              "1                 0.128205                                 0.0   \n",
              "2                 0.397036                                 0.0   \n",
              "3                 0.362245                                 0.0   \n",
              "4                      NaN                                 0.0   \n",
              "\n",
              "   DAYS_LAST_PHONE_CHANGE  CODE_GENDER  APPROVED_DAYS_DECISION_MIN  \\\n",
              "0                 -1740.0            1                     -1740.0   \n",
              "1                     0.0            0                      -757.0   \n",
              "2                  -856.0            0                     -1999.0   \n",
              "3                 -1805.0            1                     -1805.0   \n",
              "4                  -821.0            0                      -821.0   \n",
              "\n",
              "   REFUSED_HOUR_APPR_PROCESS_START_MIN  DAYS_ID_PUBLISH  \\\n",
              "0                                  NaN             -812   \n",
              "1                                  NaN            -1623   \n",
              "2                                  NaN            -3503   \n",
              "3                                  NaN            -4208   \n",
              "4                                  NaN            -4262   \n",
              "\n",
              "   REG_CITY_NOT_WORK_CITY  SK_ID_CURR  \n",
              "0                       0      100001  \n",
              "1                       0      100005  \n",
              "2                       0      100013  \n",
              "3                       0      100028  \n",
              "4                       1      100038  \n",
              "\n",
              "[5 rows x 32 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4f33b482-a181-4f76-99f6-f7899a2aeb44\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TARGET</th>\n",
              "      <th>EXT_SOURCE_3</th>\n",
              "      <th>EXT_SOURCE_2</th>\n",
              "      <th>EXT_SOURCE_1</th>\n",
              "      <th>CC_CNT_DRAWINGS_ATM_CURRENT_MEAN</th>\n",
              "      <th>CC_CNT_DRAWINGS_CURRENT_MAX</th>\n",
              "      <th>BURO_DAYS_CREDIT_MEAN</th>\n",
              "      <th>CC_AMT_BALANCE_MEAN</th>\n",
              "      <th>BURO_CREDIT_ACTIVE_Closed_MEAN</th>\n",
              "      <th>DAYS_BIRTH</th>\n",
              "      <th>...</th>\n",
              "      <th>NAME_EDUCATION_TYPE_Higher education</th>\n",
              "      <th>BURO_STATUS_C_MEAN_MEAN</th>\n",
              "      <th>PREV_CODE_REJECT_REASON_SCOFR_MEAN</th>\n",
              "      <th>DAYS_LAST_PHONE_CHANGE</th>\n",
              "      <th>CODE_GENDER</th>\n",
              "      <th>APPROVED_DAYS_DECISION_MIN</th>\n",
              "      <th>REFUSED_HOUR_APPR_PROCESS_START_MIN</th>\n",
              "      <th>DAYS_ID_PUBLISH</th>\n",
              "      <th>REG_CITY_NOT_WORK_CITY</th>\n",
              "      <th>SK_ID_CURR</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NaN</td>\n",
              "      <td>0.159520</td>\n",
              "      <td>0.789654</td>\n",
              "      <td>0.752614</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-735.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.571429</td>\n",
              "      <td>-19241</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>0.441240</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1740.0</td>\n",
              "      <td>1</td>\n",
              "      <td>-1740.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-812</td>\n",
              "      <td>0</td>\n",
              "      <td>100001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>NaN</td>\n",
              "      <td>0.432962</td>\n",
              "      <td>0.291656</td>\n",
              "      <td>0.564990</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-190.666667</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>-18064</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>0.128205</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>-757.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-1623</td>\n",
              "      <td>0</td>\n",
              "      <td>100005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "      <td>0.610991</td>\n",
              "      <td>0.699787</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.255556</td>\n",
              "      <td>7.0</td>\n",
              "      <td>-1737.500000</td>\n",
              "      <td>18159.919219</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-20038</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>0.397036</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-856.0</td>\n",
              "      <td>0</td>\n",
              "      <td>-1999.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-3503</td>\n",
              "      <td>0</td>\n",
              "      <td>100013</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NaN</td>\n",
              "      <td>0.612704</td>\n",
              "      <td>0.509677</td>\n",
              "      <td>0.525734</td>\n",
              "      <td>0.045455</td>\n",
              "      <td>12.0</td>\n",
              "      <td>-1401.750000</td>\n",
              "      <td>8085.058163</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>-13976</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>0.362245</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1805.0</td>\n",
              "      <td>1</td>\n",
              "      <td>-1805.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-4208</td>\n",
              "      <td>0</td>\n",
              "      <td>100028</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.425687</td>\n",
              "      <td>0.202145</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-13040</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-821.0</td>\n",
              "      <td>0</td>\n",
              "      <td>-821.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-4262</td>\n",
              "      <td>1</td>\n",
              "      <td>100038</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 32 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4f33b482-a181-4f76-99f6-f7899a2aeb44')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4f33b482-a181-4f76-99f6-f7899a2aeb44 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4f33b482-a181-4f76-99f6-f7899a2aeb44');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e27edb56-4e6d-4b95-9966-27d1484f91eb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e27edb56-4e6d-4b95-9966-27d1484f91eb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e27edb56-4e6d-4b95-9966-27d1484f91eb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}